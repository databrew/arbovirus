"id10216",
"id10217",
"id10218",
"id10219",
"id10220",
"id10221",
"id10222",
"id10223",
"id10225",
"id10226",
"id10224",
"id10227",
"id10228",
"id10229",
"id10230",
"id10231",
"id10232_units",
"id10232_a",
"id10232_b",
"id10232",
"id10233",
"id10234",
"id10235",
"id10235_check",
"id10236",
"id10237",
"id10238",
"id10239",
"id10240",
"id10241",
"id10242",
"id10243",
"id10244",
"id10245",
"id10246",
"id10247",
"id10248_units",
"id10248_a",
"id10248_b",
"id10248",
"id10249",
"id10250_units",
"id10250_a",
"id10250_b",
"id10250",
"id10251",
"id10252",
"id10253",
"id10254",
"id10255",
"id10256",
"id10257",
"id10258",
"id10259",
"id10260",
"id10260_check",
"id10260_check2",
"id10261",
"id10262_units",
"id10262_a",
"id10262_b",
"id10262",
"id10263",
"id10264",
"id10265",
"id10266_units",
"id10266_a",
"id10266_b",
"id10266",
"id10267",
"id10268",
"id10269",
"id10270",
"id10271",
"id10272",
"id10273",
"id10274_a",
"id10274_units",
"id10274_b",
"id10274_c",
"id10274",
"id10275",
"id10276",
"id10277",
"id10278",
"id10279",
"id10281",
"id10282",
"id10283",
"id10284",
"id10285",
"id10286",
"id10287",
"id10288",
"id10289",
"id10290",
"id10485",
"id10486",
"id10294",
"id10295",
"id10296",
"id10297",
"id10298",
"id10301",
"id10299",
"id10302",
"id10303",
"id10300",
"id10304",
"id10305",
"id10306",
"id10307",
"id10308",
"id10309",
"id10310",
"id10310_check",
"id10312",
"id10313",
"id10314",
"id10315_a",
"id10315",
"id10316",
"id10317",
"id10318",
"id10319",
"id10320",
"id10321",
"id10322",
"id10323",
"id10324",
"id10325",
"id10326",
"id10327",
"id10328",
"id10329",
"id10330",
"id10331",
"id10332",
"id10333",
"id10334",
"id10335",
"id10336",
"id10337",
"id10338",
"id10339",
"id10342",
"id10343",
"id10344",
"id10347",
"id10340",
"id10352_units",
"id10352_a",
"id10352_b",
"id10352",
"id10354",
"id10355",
"id10356",
"id10357",
"id10358_units",
"id10358",
"id10359",
"id10359_a",
"id10360",
"id10361",
"id10362",
"id10363",
"id10364",
"id10365",
"id1036x_check",
"id10366",
"id10367",
"id10368",
"id10369",
"id10370",
"id10371",
"id10372",
"id10373",
"id10394",
"id10376",
"id10377",
"id10379_unit",
"id10379",
"id10380",
"id10382",
"id10383",
"id10384",
"id10385",
"id10387",
"id10388",
"id10389",
"id10389_check",
"id10391",
"id10392",
"id10393",
"id10395",
"id10396",
"id10397",
"id10398",
"id10399",
"id10400",
"id10401",
"id10402",
"id10403",
"id10404",
"id10405",
"id10406",
"id10411",
"id10412",
"id10413",
"id10414",
"id10414_check",
"id10415",
"id10416",
"id10418",
"id10419",
"id10420",
"id10421",
"id10422",
"id10423",
"id10424",
"id10425",
"id10426",
"id10427",
"id10428",
"id10429",
"id10430",
"id10431",
"id10431_check",
"id10432",
"id10433",
"id10433_check",
"id10434",
"id10435",
"id10436",
"id10437",
"id10438",
"id10439_check",
"id10439",
"id10440_check",
"id10440",
"id10441_check",
"id10441",
"id10442",
"id10443",
"id10444",
"id10445",
"id10446",
"id10450",
"id10451",
"id10452",
"id10453",
"id10454",
"id10455",
"id10456",
"id10457",
"id10458",
"id10459",
"id10462",
"id10463",
"id10464",
"id10465",
"id10466",
"id10467",
"id10468",
"id10469",
"id10470",
"id10471",
"id10472",
"id10473",
"id10476",
"id10477",
"id10478",
"id10479",
"id10477_check",
"id10478_check",
"id10479_check",
"id10481",
"comment",
"instanceid")
# Get names of data per our database
va_names <- names(va)
# loop through va names and find the matching names in the WHO data and add the prefix
# 36 and 39 are wet/dry and gender gor va
for(i in 1:length(va_names)){
this_name <- va_names[i]
if(any(!is.na(as.numeric(va[,i])))){
va[,i] <- as.numeric(va[,i])
}
if(any(grepl(this_name, who_names))){
name_index <- which(who_names==this_name)
# data_type <- typeof(dat[, name_index])
# print(data_type)
if(is.integer(dat[, name_index])){
va[,i] <- as.integer(va[,i])
} else if(is.logical(dat[, name_index])){
va[,i] <- as.logical(va[,i])
} else if(is.character(dat[, name_index])){
va[,i] <- as.character(va[,i])
} else if(is.factor(dat[, name_index])) {
va[,i] <- as.factor(va[,i])
}
names(va)[i] <- names(dat)[name_index]
print(i)
}
}
# temp_who <- odk2openVA_v151(dat, id_col = 'meta.instanceID')
temp_va <- odk2openVA_v151(va, id_col = 'death_id')
out <- InterVA5(temp_va,  HIV = "h", Malaria = "h", directory = getwd())
# Get into dataframe format
out_list <- list()
individual <- out$VA5
for(i in 1:length(individual)){
message(i)
this_individual <- individual[[i]]
id <- this_individual$ID
x <- this_individual$CAUSE1
probs <- this_individual$wholeprob
vals <- as.numeric(probs)
the_names <- names(probs)
df <- tibble(ID = id,
COD = the_names,
Probability = vals)
out_list[[i]] <- df
}
df <- bind_rows(out_list)
save(out, df, file = 'data.RData')
}
print(summary(out))
options(scipen = '999')
pd <- df %>%
filter(ID == dplyr::first(ID)) %>%
mutate(ID = '<CENSORED>') %>%
arrange(desc(Probability))
databrew::prettify(pd,
nrows = nrow(pd),
round_digits = 10)
population <- df %>%
arrange(desc(Probability)) %>%
group_by(ID) %>%
summarise(most_likely = dplyr::first(COD)) %>%
ungroup %>%
group_by(most_likely) %>%
tally %>%
mutate(p = n / sum(n) * 100) %>%
arrange(desc(p))
View(df)
df %>% group_by(ID)
out$VA5
str( out$VA5 )
str( out$VA5[[1]])
length( out$VA5 )
str( out$VA5[[1136]])
length( unique(df$ID) )
out$VA5[[1]]$ID
ids <- []
ids <- vector("character",1136)
for( i in 1:1136 ){ ids[i] <- out$VA5[[i]]$ID }
unique( ids )
length( unique( ids ) )
knitr::opts_chunk$set(
collapse = TRUE,
comment = NA,
echo = FALSE,
warning = FALSE,
message = FALSE,
error = TRUE,
cache = FALSE,
fig.path = "figures/",
out.width = "100%"
)
cat('Date-time: ', as.character(Sys.time()))
## Load libraries
library(ggplot2)
library(lubridate)
library(dplyr)
library(CrossVA)
# not yet able to install InSilicoVA package (openVA dependency)
# library(openVA)
# library(nbc4va)
library(InterVA5)
#library(bohemia)
#library(RPostgres)
library(tidyverse)
# library(databrew)
options(scipen = '999')
ggplot2::theme_set(theme_bw())
# assumes that 'data.RData' is in the current directory!!
load('data.RData')
load('va.RData')
source("odk2interVA.R")
# # temp_who <- odk2openVA_v151(dat, id_col = 'meta.instanceID')
temp_va <- odk2interVA(va, id_col = 'instance_id')
# # temp_who <- odk2openVA_v151(dat, id_col = 'meta.instanceID')
temp_va <- odk2interVA(va, id_col = 'instance_id')
out <- InterVA5(temp_va,  HIV = "h", Malaria = "h", directory = getwd())
View(out)
print(summary(out))
ls()
View(va)
View(out)
# assumes that 'data.RData' is in the current directory!!
load('data.RData')
ls()
View(df)
length( unique( df$ID ))
79520/1125
print(summary(out))
# Below are population-level summed probabilities
pd <- df %>%
group_by(COD) %>%
summarise(Probability = sum(Probability)) %>%
arrange(desc(Probability))
pd$COD <- factor(pd$COD, levels = pd$COD)
ggplot(data = pd,
aes(x = COD,
y = Probability)) +
geom_bar(stat = 'identity') +
theme(axis.text.x = element_text(angle = 90,
vjust = 0.5,
hjust = 1))
options(scipen = '999')
pd <- df %>%
filter(ID == dplyr::first(ID)) %>%
mutate(ID = '<CENSORED>') %>%
arrange(desc(Probability))
databrew::prettify(pd,
nrows = nrow(pd),
round_digits = 10)
population <- df %>%
arrange(desc(Probability)) %>%
group_by(ID) %>%
summarise(most_likely = dplyr::first(COD)) %>%
ungroup %>%
group_by(most_likely) %>%
tally %>%
mutate(p = 100*( n / sum(n) ) ) %>%
arrange(desc(p))
population
ls()
dim(va)
load('va.RData')
source("odk2interVA.R")
# # temp_who <- odk2openVA_v151(dat, id_col = 'meta.instanceID')
temp_va <- odk2interVA(va, id_col = 'death_id')
va_out <- InterVA5(temp_va,  HIV = "h", Malaria = "h", directory = getwd())
ls()
View(va_out)
length( unique( va$death_id))
data(RandomVA5)
ls()
View(RandomVA5)
data(probbaseV5)
View(probbaseV5)
library(readxl)
dummy <- read_excel("Downloads/Dummy data subset_375147_16 June.xlsx")
View(dummy)
getwd()
source("~/databrew/arbodata/survey_375147_R_syntax_file.R", echo=TRUE)
dir()
getwd()
dir()
data <- read.csv("survey_375147_R_data_file_30July.csv", quote = "'\"", na.strings=c("", "\"\""), stringsAsFactors=FALSE, fileEncoding="UTF-8-BOM")
file.path()
dir()
?dir
getSrcDirectory()
?getSrcDirectory
getwd()
ls()
library(readr)
dict <- read_csv("databrew/arbovirus/misc/Data dictionary_Survey 375147_16 June 2021.csv")
View(dict)
str(dict)
getwd()
setwd("databrew/arbodata/")
source("~/databrew/arbodata/survey_375147_R_syntax_file.R", echo=TRUE)
?save
str(data)
?file.exists
?require
getwd()
setwd("../arbovirus/")
dir()
setwd(dir())
getwd()
dir()
getwD()
getwd()
setwd("../")
getwd
getwd()
getwd()
setwd("../arbodata/")
getwd()
setwd("../arbovirus/")
source("../arbodata/survey_375147_R_syntax_file.R")
setwd("../arbodata/")
source("survey_375147_R_syntax_file.R")
getwd()
save(data,"data.RData")
save(data)
getwd()
ls()
save(data,file="data.RData")
ls()
list.files()
getwd()
setwd("../arbovirus/")
ls()
rm(data)
rm(dict)
ls()
